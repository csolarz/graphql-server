name: Checking
on:
  pull_request:
    branches: [ develop ]

jobs:
  # Instala Go, cachea dependencias, compila, corre tests con cobertura, sube reportes a Codecov.
  test:
    name: Testing and coverage
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: ['1.25']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Build
      run: go build -v ./...
    
    - name: Run tests
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Analiza el código con golangci-lint.
  golangci:
    name: Linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version: stable
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.4.0

  sast:
    name: SAST Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Go

      uses: actions/setup-go@v4
      with:
        go-version: '1.25'

    - name: Install gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest

    - name: Run gosec (SAST scan)
      # -severity=medium hace que detecte vulnerabilidades de nivel Medium y High
      #
      # Tipos de vulnerabilidades que detectará:
      # 1️⃣ SQL Injection (uso inseguro de inputs en queries)
      # 2️⃣ Command Injection (ejecución de comandos sin sanitizar)
      # 3️⃣ Hardcoded credentials (credenciales en el código)
      # 4️⃣ Uso inseguro de funciones criptográficas (MD5, DES, SHA1, etc.)
      # 5️⃣ Potenciales desbordes de buffer o manejo inseguro de memoria
      run: gosec -severity medium ./...

    - name: Save gosec report
      run: gosec -fmt=json -out=gosec-report.json -severity medium ./...
      
    - uses: actions/upload-artifact@v3
      with:
        name: gosec-report
        path: gosec-report.json